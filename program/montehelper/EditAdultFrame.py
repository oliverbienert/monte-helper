# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat Jul  7 13:55:07 2012

import wx  # @UnusedImport
import wx.lib.agw.persist as PM
from pubsub import setupkwargs  # @UnusedImport
from pubsub import pub
from TextObjectValidator import TextObjectValidator as TOV
from ListView import ListView
from WxHelpers import WxHelpers
from Helpers import Helpers
from ListCtrlValidator import ListCtrlValidator as LCV
import logging

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade
ID_NA = wx.NewId()
ID_FI = wx.NewId()
ID_ST = wx.NewId()
ID_NU = wx.NewId()
ID_PO = wx.NewId()
ID_CI = wx.NewId()
ID_HS = wx.NewId()
ID_TC = wx.NewId()
ID_CB = wx.NewId()
ID_TC1 = wx.NewId()
ID_TC2 = wx.NewId()
ID_TC3 = wx.NewId()
ID_CB1 = wx.NewId()
ID_DI = wx.NewId()

# Make a shorter alias
_ = wx.GetTranslation

# Logger
logger = logging.getLogger('montehelper.%s' % __name__)


class EditAdultFrame(wx.Frame, WxHelpers, Helpers):
    def __init__(self, *args, **kwds):
        WxHelpers.__init__(self)
        Helpers.__init__(self)
        # begin wxGlade: EditAdultFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.FULL_REPAINT_ON_RESIZE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((663, 746))
        self.panel_2 = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.l_name = wx.StaticText(self.panel_2, wx.ID_ANY, _("Name, First name"))
        self.name = wx.TextCtrl(self.panel_2, ID_NA, "")
        self.firstname = wx.TextCtrl(self.panel_2, ID_FI, "")
        self.l_street = wx.StaticText(self.panel_2, wx.ID_ANY, _("Street, No."))
        self.street = wx.TextCtrl(self.panel_2, ID_ST, "")
        self.number = wx.TextCtrl(self.panel_2, ID_NU, "")
        self.l_city = wx.StaticText(self.panel_2, wx.ID_ANY, _("Postcode, city"))
        self.postcode = wx.TextCtrl(self.panel_2, ID_PO, "")
        self.city = wx.TextCtrl(self.panel_2, ID_CI, "")
        self.staff = wx.CheckBox(self.panel_2, wx.ID_ANY, _("Staff"))
        self.organization = wx.CheckBox(self.panel_2, wx.ID_ANY, _("Organization member"))
        self.l_householdsize = wx.StaticText(self.panel_2, wx.ID_ANY, _("Household size"))
        self.householdsize = wx.TextCtrl(self.panel_2, ID_HS, "")
        self.l_fonnumber = wx.StaticText(self.panel_2, wx.ID_ANY, _("Number"))
        self.fonnumber = wx.TextCtrl(self.panel_2, ID_TC, "")
        self.l_fontype = wx.StaticText(self.panel_2, wx.ID_ANY, _("Type"))
        self.fontype = wx.ComboBox(self.panel_2, ID_CB, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.b_newfon = wx.Button(self.panel_2, wx.ID_ANY, _("&New"))
        self.b_deletefon = wx.Button(self.panel_2, wx.ID_ANY, _("Delete"))
        self.lv_fonnumbers = ListView(self.panel_2, wx.ID_ANY)
        self.l_email = wx.StaticText(self.panel_2, wx.ID_ANY, _("Address"))
        self.email = wx.TextCtrl(self.panel_2, ID_TC1, "")
        self.label_4_copy = wx.StaticText(self.panel_2, wx.ID_ANY, _("Note"))
        self.emailnote = wx.TextCtrl(self.panel_2, ID_TC2, "")
        self.b_newemail = wx.Button(self.panel_2, wx.ID_ANY, _("&New"))
        self.b_deleteemail = wx.Button(self.panel_2, wx.ID_ANY, _("Delete"))
        self.lv_email = ListView(self.panel_2, wx.ID_ANY)
        self.l_income = wx.StaticText(self.panel_2, wx.ID_ANY, _("Income"))
        self.income = wx.TextCtrl(self.panel_2, ID_TC3, "")
        self.l_incometype = wx.StaticText(self.panel_2, wx.ID_ANY, _("Type"))
        self.incometype = wx.ComboBox(self.panel_2, ID_CB1, choices=[], style=0)
        self.b_newincome = wx.Button(self.panel_2, wx.ID_ANY, _("&New"))
        self.b_deleteincome = wx.Button(self.panel_2, wx.ID_ANY, _("Delete"))
        self.lv_income = ListView(self.panel_2, wx.ID_ANY)
        self.b_ok = wx.Button(self.panel_2, wx.ID_OK, "")
        self.btn_Apply = wx.Button(self.panel_2, wx.ID_APPLY, "")
        self.b_cancel = wx.Button(self.panel_2, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_NA)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_FI)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_ST)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_NU)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_PO)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_CI)
        self.Bind(wx.EVT_CHECKBOX, self.OnChanged, self.staff)
        self.Bind(wx.EVT_CHECKBOX, self.OnChanged, self.organization)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_HS)
        self.Bind(wx.EVT_TEXT, self.OnRefreshFon, id=ID_TC)
        self.Bind(wx.EVT_COMBOBOX, self.OnRefreshFon, id=ID_CB)
        self.Bind(wx.EVT_BUTTON, self.OnNewFon, self.b_newfon)
        self.Bind(wx.EVT_BUTTON, self.OnDeleteFon, self.b_deletefon)
        self.Bind(wx.EVT_TEXT, self.OnRefreshEmail, id=ID_TC1)
        self.Bind(wx.EVT_TEXT, self.OnRefreshEmail, id=ID_TC2)
        self.Bind(wx.EVT_BUTTON, self.OnNewEmail, self.b_newemail)
        self.Bind(wx.EVT_BUTTON, self.OnDeleteEmail, self.b_deleteemail)
        self.Bind(wx.EVT_TEXT, self.OnRefreshIncome, id=ID_TC3)
        self.Bind(wx.EVT_COMBOBOX, self.OnRefreshIncome, id=ID_CB1)
        self.Bind(wx.EVT_BUTTON, self.OnNewIncome, self.b_newincome)
        self.Bind(wx.EVT_BUTTON, self.OnDeleteIncome, self.b_deleteincome)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.b_ok)
        self.Bind(wx.EVT_BUTTON, self.OnApply, self.btn_Apply)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.b_cancel)
        # end wxGlade

        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelectedFonnumbers, self.lv_fonnumbers)
        self.__initLVFonnumbers()

        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelectedEmail, self.lv_email)
        self.__initLVEmail()

        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelectedIncome, self.lv_income)
        self.__initLVIncome()
        self.SetExtraStyle(wx.WS_EX_VALIDATE_RECURSIVELY)

        self.obj = None
        self.positions = None
        self.fonnumberobject = None
        self.emails = None
        self.incomeobject = None

        # Register PubSub Listener
        pub.subscribe(self.Populate, 'dialog.populate.adult')  # @UndefinedVariable
        pub.subscribe(self.fill_comboboxes, 'editadultframe.fillcomboboxes')  # @UndefinedVariable

        # Persistence
        self.SetName('EditParentFrame')
        self._persistMgr = PM.PersistenceManager.Get()
        wx.CallAfter(self.__register)

        self.Bind(wx.EVT_CLOSE, self.OnClose)

        # Call this method when a value is edited in the frame
        self.__edited(False)

        # Ignore events when resetting the widgets
        self._clearing = False

    def __set_properties(self):
        # begin wxGlade: EditAdultFrame.__set_properties
        self.SetTitle(_("Edit adult record"))
        self.name.SetMinSize((120, 23))
        self.name.SetName('name')
        self.firstname.SetMinSize((120, 23))
        self.firstname.SetName('firstname')
        self.street.SetMinSize((120, 23))
        self.street.SetName('street')
        self.number.SetName('number')
        self.postcode.SetName('postcode')
        self.city.SetMinSize((120, 23))
        self.city.SetName('city')
        self.householdsize.SetMinSize((60, 23))
        self.householdsize.SetName('householdsize')
        self.fonnumber.SetMinSize((140, 23))
        self.fontype.SetMinSize((100, 23))
        self.b_newfon.SetMinSize((60, 23))
        self.b_deletefon.SetMinSize((60, 23))
        self.lv_fonnumbers.SetMinSize((638, 113))
        self.lv_fonnumbers.SetName('lv_fonnumbers')
        self.email.SetMinSize((120, 23))
        self.emailnote.SetMinSize((120, 23))
        self.b_newemail.SetMinSize((60, 23))
        self.b_deleteemail.SetMinSize((60, 23))
        self.lv_email.SetMinSize((638, 113))
        self.lv_email.SetName('lv_email')
        self.incometype.SetMinSize((120, 23))
        self.b_newincome.SetMinSize((60, 23))
        self.b_deleteincome.SetMinSize((60, 23))
        self.lv_income.SetMinSize((638, 105))
        self.lv_income.SetName('lv_income')
        self.b_ok.SetMinSize((70, 30))
        self.btn_Apply.SetMinSize((70, 30))
        self.btn_Apply.Enable(False)
        self.b_cancel.SetMinSize((70, 30))
        self.panel_2.SetMinSize((655, 708))
        self.panel_2.SetScrollRate(10, 10)
        # end wxGlade
        self.name.SetValidator = TOV()
        self.firstname.Validator = TOV()
        self.street.Validator = TOV()
        self.number.Validator = TOV()
        self.postcode.Validator = TOV()
        self.city.Validator = TOV()
        self.householdsize.Validator = TOV()
        self.lv_fonnumbers.Validator = LCV()
        self.lv_email.Validator = LCV()
        self.lv_income.Validator = LCV()

    def __do_layout(self):
        # begin wxGlade: EditAdultFrame.__do_layout
        sizer_34 = wx.BoxSizer(wx.VERTICAL)
        sizer_36 = wx.BoxSizer(wx.VERTICAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, _("Income")), wx.VERTICAL)
        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, _("E-Mail Addresses")), wx.VERTICAL)
        sizer_42 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, _("Fonnumbers")), wx.VERTICAL)
        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5_copy = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, _("State")), wx.VERTICAL)
        grid_sizer_1_copy = wx.FlexGridSizer(3, 2, 3, 3)
        sizer_4_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1_copy.Add(self.l_name, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_18.Add(self.name, 1, wx.ALL | wx.EXPAND, 1)
        sizer_18.Add(self.firstname, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1_copy.Add(sizer_18, 1, wx.EXPAND, 0)
        grid_sizer_1_copy.Add(self.l_street, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_11_copy.Add(self.street, 1, wx.ALL | wx.EXPAND, 1)
        sizer_11_copy.Add(self.number, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1_copy.Add(sizer_11_copy, 1, wx.EXPAND, 0)
        grid_sizer_1_copy.Add(self.l_city, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_4_copy.Add(self.postcode, 0, wx.ALL | wx.EXPAND, 1)
        sizer_4_copy.Add(self.city, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1_copy.Add(sizer_4_copy, 1, wx.EXPAND, 0)
        grid_sizer_1_copy.AddGrowableCol(1)
        sizer_40.Add(grid_sizer_1_copy, 0, wx.ALL | wx.EXPAND, 3)
        sizer_5_copy.Add(self.staff, 0, wx.ALL, 1)
        sizer_5_copy.Add(self.organization, 0, wx.ALL, 1)
        sizer_2.Add(sizer_5_copy, 1, wx.ALL | wx.EXPAND, 3)
        sizer_3.Add(self.l_householdsize, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_3.Add(self.householdsize, 1, wx.ALL | wx.EXPAND, 1)
        sizer_2.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 3)
        sizer_40.Add(sizer_2, 0, wx.ALL | wx.EXPAND, 3)
        sizer_36.Add(sizer_40, 0, wx.EXPAND, 0)
        sizer_12_copy.Add(self.l_fonnumber, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_12_copy.Add(self.fonnumber, 0, wx.ALL | wx.EXPAND, 1)
        sizer_12_copy.Add(self.l_fontype, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_12_copy.Add(self.fontype, 0, wx.ALL | wx.EXPAND, 1)
        sizer_12_copy.Add((1, 1), 1, wx.EXPAND, 0)
        sizer_12_copy.Add(self.b_newfon, 0, 0, 0)
        sizer_12_copy.Add(self.b_deletefon, 0, 0, 0)
        sizer_37.Add(sizer_12_copy, 0, wx.ALL | wx.EXPAND, 3)
        sizer_41.Add(self.lv_fonnumbers, 1, wx.EXPAND, 0)
        sizer_37.Add(sizer_41, 1, wx.ALL | wx.EXPAND, 3)
        sizer_36.Add(sizer_37, 1, wx.ALL | wx.EXPAND, 3)
        sizer_15_copy.Add(self.l_email, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_15_copy.Add(self.email, 0, wx.ALL, 1)
        sizer_15_copy.Add(self.label_4_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_15_copy.Add(self.emailnote, 1, wx.ALL | wx.EXPAND, 1)
        sizer_15_copy.Add(self.b_newemail, 0, 0, 0)
        sizer_15_copy.Add(self.b_deleteemail, 0, 0, 0)
        sizer_38.Add(sizer_15_copy, 0, wx.ALL | wx.EXPAND, 3)
        sizer_42.Add(self.lv_email, 1, wx.EXPAND, 0)
        sizer_38.Add(sizer_42, 1, wx.ALL | wx.EXPAND, 3)
        sizer_36.Add(sizer_38, 1, wx.ALL | wx.EXPAND, 3)
        sizer_24.Add(self.l_income, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_24.Add(self.income, 0, wx.ALL, 1)
        sizer_24.Add(self.l_incometype, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)
        sizer_24.Add(self.incometype, 0, wx.ALL | wx.EXPAND, 1)
        sizer_24.Add((1, 1), 1, wx.EXPAND, 0)
        sizer_24.Add(self.b_newincome, 0, 0, 0)
        sizer_24.Add(self.b_deleteincome, 0, 0, 0)
        sizer_39.Add(sizer_24, 0, wx.ALL | wx.EXPAND, 3)
        sizer_43.Add(self.lv_income, 1, wx.EXPAND, 0)
        sizer_39.Add(sizer_43, 1, wx.ALL | wx.EXPAND, 3)
        sizer_36.Add(sizer_39, 1, wx.ALL | wx.EXPAND, 3)
        sizer_35.Add(self.b_ok, 0, 0, 0)
        sizer_35.Add(self.btn_Apply, 0, 0, 0)
        sizer_35.Add(self.b_cancel, 0, 0, 0)
        sizer_36.Add(sizer_35, 0, wx.ALIGN_RIGHT | wx.ALL, 3)
        self.panel_2.SetSizer(sizer_36)
        sizer_34.Add(self.panel_2, 1, wx.EXPAND | wx.FIXED_MINSIZE, 0)
        self.SetSizer(sizer_34)
        self.Layout()
        # end wxGlade

    def __initLVFonnumbers(self):
        self.lv_fonnumbers.SetColumn('number', 'Nummer', wx.LIST_FORMAT_LEFT, 150)
        self.lv_fonnumbers.SetColumn('description', 'Typ', wx.LIST_FORMAT_LEFT, 150)

    def __initLVEmail(self):
        self.lv_email.SetColumn('email', 'e-Mail-Adresse', wx.LIST_FORMAT_LEFT, 150)
        self.lv_email.SetColumn('note', 'Bemerkung', wx.LIST_FORMAT_LEFT, 150)

    def __initLVIncome(self):
        self.lv_income.SetColumn('income', 'Einkommen', wx.LIST_FORMAT_LEFT, 150, stringConverter='%i')
        self.lv_income.SetColumn('description', 'Art', wx.LIST_FORMAT_LEFT, 150)

    def __register(self):
        self.Freeze()
        self._persistMgr.RegisterAndRestore(self)
        self.Thaw()

    def __edited(self, val):
        self.edited = val
        self.btn_Apply.Enable(val)

    def Clear(self):
        self._clearing = True
        # The object holding the data of this dialog
        self.obj = {'name': '',
                    'firstname': '',
                    'street': '',
                    'number': '',
                    'postcode': '',
                    'city': '',
                    'householdsize': ''}
        self.Populate(self.obj)
        self.staff.SetValue(False)
        self.organization.SetValue(False)
        self.fonnumber.Clear()
        self.set_cb_value(self.fontype, '')
        self.email.Clear()
        self.emailnote.Clear()
        self.income.Clear()
        self.set_cb_value(self.incometype, '')
        self.positions = None
        self.fonnumberobject = None
        self.emails = None
        self.incomeobject = None
        self.__edited(False)
        self._clearing = False

    def Save(self):
        ret = True
        if self.edited == True:
            if not self.Validate():
                ret = False
            else:
                self.__edited(False)
                self.SendData()
        return ret

    def Populate(self, data, positions=None, fonnumbers=None, email=None, income=None):
        if income is None:
            income = []
        if email is None:
            email = []
        if fonnumbers is None:
            fonnumbers = []
        if positions is None:
            positions = []
        self.obj = data
        for k, v in data.items():
            try:
                attr = getattr(self, k)
                if k == "householdsize" and v != None:
                    # Convert to string
                    v = '%s' % v
                attr.SetValue(v)
            except (AttributeError, TypeError):
                continue
        for position in positions:
            try:
                attr = getattr(self, position[0])
                attr.SetValue(True)
            except Exception:
                continue
        self.lv_fonnumbers.SetObjects(fonnumbers)
        self.lv_email.SetObjects(email)
        self.lv_income.SetObjects(income)
        self.__edited(False)

    def SendData(self):
        # Get values of this dialog
        positions = []
        for position in ('staff', 'organization'):
            attr = getattr(self, position)
            if (attr.GetValue() == True):
                positions.append(position)
        fonnumbers = self.lv_fonnumbers.GetObjects()
        email = self.lv_email.GetObjects()
        income = self.lv_income.GetObjects()
        pub.sendMessage('dialog.adult.senddata',  # @UndefinedVariable
                        data=self.obj, positions=positions,
                        fonnumbers=fonnumbers,
                        email=email,
                        income=income)
        return True

    def OnClose(self, event):
        self.Hide()

    def OnCloseButton(self):  # wxGlade: EditChildDialog.<event_handler>
        close_event = wx.PyCommandEvent(wx.EVT_CLOSE.typeId, self.GetId())
        wx.PostEvent(self.GetEventHandler(), close_event)

    def OnCancel(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        self.OnCloseButton()

    def OnNewFon(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.fonnumberobject = {'fonnumber_id': None, 'fonnumbertype_id': '', 'description': '', 'number': ''}
        self.lv_fonnumbers.AddObject(self.fonnumberobject)
        self.fonnumber.Clear()
        self.set_cb_value(self.fontype, '')

    def OnDeleteFon(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        self.fonnumberobject = self.lv_fonnumbers.GetSelectedObject()
        if (not self.fonnumberobject):
            return
        self.fonnumber.Clear()
        self.set_cb_value(self.fontype, '')
        self.lv_fonnumbers.RemoveObject(self.fonnumberobject)
        self.fonnumberobject = None

    def OnRefreshFon(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        event_id = event.GetId()
        if (self.fonnumberobject == None):
            # itemObject is a dictionary with keys label and id
            dct = self.get_cb_value(self.fontype)
            self.fonnumberobject = {'fonnumber_id': None, 'fonnumbertype_id': dct['id'], 'description': dct['label'],
                                    'number': self.fonnumber.GetValue()}
            self.lv_fonnumbers.AddObject(self.fonnumberobject)
            return
        elif (event_id == ID_TC):
            self.fonnumberobject['number'] = self.fonnumber.GetValue()
        elif (event_id == ID_CB):
            dct = self.get_cb_value(self.fontype)
            self.fonnumberobject['fonnumbertype_id'] = dct['id']
            self.fonnumberobject['description'] = dct['label']
        self.lv_fonnumbers.RefreshObject(self.fonnumberobject)

    def OnItemSelectedFonnumbers(self, event):
        if self._clearing:
            return
        self.fonnumberobject = self.lv_fonnumbers.GetSelectedObject()
        if (not self.fonnumberobject):
            return
        self.fonnumber.SetValue(self.fonnumberobject['number'])
        self.set_cb_value(self.fontype, self.fonnumberobject['fonnumbertype_id'])

    def OnNewEmail(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.emails = {'email_id': None, 'note': None, 'email': ''}
        self.lv_email.AddObject(self.emails)
        self.email.Clear()
        self.emailnote.Clear()

    def OnDeleteEmail(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        self.emails = self.lv_email.GetSelectedObject()
        if (not self.emails):
            return
        self.email.Clear()
        self.emailnote.Clear()
        self.lv_email.RemoveObject(self.emails)
        self.emails = None

    def OnRefreshEmail(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        event_id = event.GetId()
        if self.emails is None:
            self.emails = {'email_id': None, 'note': self.emailnote.GetValue(), 'email': self.email.GetValue()}
            self.lv_email.AddObject(self.emails)
            return
        elif (event_id == ID_TC1):
            self.emails['email'] = self.email.GetValue()
        elif (event_id == ID_TC2):
            self.emails['note'] = self.emailnote.GetValue()
        self.lv_email.RefreshObject(self.emails)

    def OnItemSelectedEmail(self, event):
        if self._clearing:
            return
        self.emails = self.lv_email.GetSelectedObject()
        if (not self.emails):
            return
        self.email.SetValue(self.emails['email'])
        self.emailnote.SetValue(self.emails['note'])

    def OnNewIncome(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.incomeobject = {'incometype_id': '', 'description': '', 'income': None}
        self.lv_income.AddObject(self.incomeobject)
        self.income.Clear()
        self.set_cb_value(self.incometype, '')

    def OnDeleteIncome(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        self.incomeobject = self.lv_income.GetSelectedObject()
        if (not self.incomeobject):
            return
        self.income.SetValue(None)
        self.set_cb_value(self.incometype, '')
        self.lv_income.RemoveObject(self.incomeobject)
        self.incomeobject = None

    def OnRefreshIncome(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        event_id = event.GetId()
        if (self.incomeobject == None):
            # Get itemObject from combobox (Dictionary with keys label and id)
            dct = self.get_cb_value(self.incometype)
            income = self.converttoint(self.income.GetValue())
            self.incomeobject = {'incometype_id': dct['id'], 'description': dct['label'], 'income': income}
            self.lv_income.AddObject(self.incomeobject)
            return
        elif (event_id == ID_TC3):
            self.incomeobject['income'] = self.converttoint(self.income.GetValue())
        elif (event_id == ID_CB1):
            # Get itemObject from combobox
            dct = self.get_cb_value(self.incometype)
            self.incomeobject['incometype_id'] = dct['id']
            self.incomeobject['description'] = dct['label']
        self.lv_income.RefreshObject(self.incomeobject)

    def OnItemSelectedIncome(self, event):
        if self._clearing:
            return
        self.incomeobject = self.lv_income.GetSelectedObject()
        if (not self.incomeobject):
            return
        value = self.incomeobject['income']
        if value == None:
            self.income.Clear()
        else:
            self.income.SetValue('%s' % value)
        self.set_cb_value(self.incometype, self.incomeobject['incometype_id'])

    def OnChanged(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        event_id = event.GetId()
        if (event_id == ID_NA):
            self.obj['name'] = self.name.GetValue()
        elif (event_id == ID_FI):
            self.obj['firstname'] = self.firstname.GetValue()
        elif (event_id == ID_ST):
            self.obj['street'] = self.street.GetValue()
        elif (event_id == ID_NU):
            self.obj['number'] = self.number.GetValue()
        elif (event_id == ID_PO):
            self.obj['postcode'] = self.postcode.GetValue()
        elif (event_id == ID_CI):
            self.obj['city'] = self.city.GetValue()
        elif (event_id == ID_HS):
            self.obj['householdsize'] = self.householdsize.GetValue()

    def OnApply(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        self.Save()

    def OnOK(self, event):  # wxGlade: EditAdultFrame.<event_handler>
        if self.Save():
            self.OnCloseButton()

# end of class EditAdultFrame
