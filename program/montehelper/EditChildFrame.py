# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Jul  2 23:51:50 2012

import wx #@UnusedImport
import wx.lib.agw.persist as PM
from pubsub import setupkwargs #@UnusedImport
from pubsub import pub
from wx import adv
from datetime import datetime
import Images
from ParentDialog import ParentDialog as ParDlg
from TextObjectValidator import TextObjectValidator as TOV
from ListView import ListView
from WxHelpers import WxHelpers
from ListCtrlValidator import ListCtrlValidator as LCV

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade
ID_NA = wx.NewId()
ID_FN = wx.NewId()
ID_YE = wx.NewId()
ID_BI = wx.NewId()
ID_CB = wx.NewId()
ID_TC = wx.NewId()
ID_RE = wx.NewId()
ID_CHB1 = wx.NewId()
ID_CHB2 = wx.NewId()
ID_CB2 = wx.NewId()
ID_DP2 = wx.NewId()
ID_DP3 = wx.NewId()
ID_DJ = wx.NewId()
ID_DS = wx.NewId()
ID_RD = wx.NewId()

# Make a shorter alias
_ = wx.GetTranslation

class EditChildFrame(wx.Frame, WxHelpers):
    def __init__(self, *args, **kwds):
        WxHelpers.__init__(self)
        # begin wxGlade: EditChildFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.ScrolledWindow(self, -1, style=wx.TAB_TRAVERSAL | wx.FULL_REPAINT_ON_RESIZE)
        self.l_Name = wx.StaticText(self.panel_1, -1, _("Name"))
        self.name = wx.TextCtrl(self.panel_1, ID_NA, "")
        self.l_firstname = wx.StaticText(self.panel_1, -1, _("First name"))
        self.firstname = wx.TextCtrl(self.panel_1, ID_FN, "")
        self.l_registrationdate = wx.StaticText(self.panel_1, -1, _("Registration date"))
        self.registrationdate = adv.DatePickerCtrl(self.panel_1, ID_RD, style=adv.DP_ALLOWNONE)
        self.l_birthdate = wx.StaticText(self.panel_1, -1, _("Birth date"))
        self.birthdate = adv.DatePickerCtrl(self.panel_1, ID_BI, style=adv.DP_ALLOWNONE)
        self.l_benefit = wx.StaticText(self.panel_1, -1, _("Child benefit"))
        self.benefit = wx.TextCtrl(self.panel_1, ID_CB, "")
        self.l_joindate = wx.StaticText(self.panel_1, -1, _("Date of joining"))
        self.joindate = adv.DatePickerCtrl(self.panel_1, ID_DJ, style=adv.DP_ALLOWNONE)
        self.l_year = wx.StaticText(self.panel_1, -1, _("Year"))
        self.year = wx.ComboBox(self.panel_1, ID_YE, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY)
        self.l_yearcalculated = wx.StaticText(self.panel_1, -1, _("Year (calculated)"))
        self.yc_description = wx.TextCtrl(self.panel_1, -1, "", style=wx.TE_READONLY)
        self.l_separationdate = wx.StaticText(self.panel_1, -1, _("Date of separation"))
        self.separationdate = adv.DatePickerCtrl(self.panel_1, ID_DS, style=adv.DP_ALLOWNONE)
        self.parent = wx.TextCtrl(self.panel_1, -1, "", style=wx.TE_READONLY)
        self.l_relation = wx.StaticText(self.panel_1, -1, _("Relationship"))
        self.relation = wx.ComboBox(self.panel_1, ID_RE, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY)
        self.calc = wx.CheckBox(self.panel_1, ID_CHB1, _("Calculation"))
        self.pay = wx.CheckBox(self.panel_1, ID_CHB2, _("Liable to pay"))
        self.button_2 = wx.Button(self.panel_1, -1, _("&New"))
        self.b_delete = wx.Button(self.panel_1, -1, _("Delete"))
        self.lv_parents = ListView(self.panel_1, -1)
        self.sizer_28_staticbox = wx.StaticBox(self.panel_1, -1, _("Parents"))
        self.l_rulings = wx.StaticText(self.panel_1, -1, _("Ruling"))
        self.ruling = wx.ComboBox(self.panel_1, ID_CB2, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY)
        self.l_startdate = wx.StaticText(self.panel_1, -1, _("Valid from"))
        self.startdate = adv.DatePickerCtrl(self.panel_1, ID_DP2, style=adv.DP_ALLOWNONE)
        self.l_enddate = wx.StaticText(self.panel_1, -1, _("Valid to"))
        self.enddate = adv.DatePickerCtrl(self.panel_1, ID_DP3, style=adv.DP_ALLOWNONE)
        self.button_5 = wx.Button(self.panel_1, -1, _("&New"))
        self.b_deleteruling = wx.Button(self.panel_1, -1, _("Delete"))
        self.lv_rulings = ListView(self.panel_1, -1)
        self.sizer_21_staticbox = wx.StaticBox(self.panel_1, -1, _("Applications/Rulings"))
        self.btn_OK = wx.Button(self.panel_1, wx.ID_OK, "")
        self.btn_Apply = wx.Button(self.panel_1, wx.ID_APPLY, "")
        self.btn_Cancel = wx.Button(self.panel_1, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_NA)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_FN)
        self.Bind(adv.EVT_DATE_CHANGED, self.OnChanged, id=ID_RD)
        self.Bind(adv.EVT_DATE_CHANGED, self.OnChanged, id=ID_BI)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_CB)
        self.Bind(adv.EVT_DATE_CHANGED, self.OnChanged, id=ID_DJ)
        self.Bind(wx.EVT_COMBOBOX, self.OnChanged, id=ID_YE)
        self.Bind(adv.EVT_DATE_CHANGED, self.OnChanged, id=ID_DS)
        self.Bind(wx.EVT_COMBOBOX, self.OnRefresh, id=ID_RE)
        self.Bind(wx.EVT_CHECKBOX, self.OnRefresh, id=ID_CHB1)
        self.Bind(wx.EVT_CHECKBOX, self.OnRefresh, id=ID_CHB2)
        self.Bind(wx.EVT_BUTTON, self.OnNew, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnDelete, self.b_delete)
        self.Bind(wx.EVT_COMBOBOX, self.OnRefreshRuling, id=ID_CB2)
        self.Bind(adv.EVT_DATE_CHANGED, self.OnRefreshRuling, id=ID_DP2)
        self.Bind(adv.EVT_DATE_CHANGED, self.OnRefreshRuling, id=ID_DP3)
        self.Bind(wx.EVT_BUTTON, self.OnNewRuling, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.OnDeleteRuling, self.b_deleteruling)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.btn_OK)
        self.Bind(wx.EVT_BUTTON, self.OnApply, self.btn_Apply)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.btn_Cancel)
        # end wxGlade
        
        # Imagelist
        self.il = wx.ImageList(16, 16)
        self.img_idx = {}
        self.img_idx['transparent'] = self.il.Add(Images.getTransparent16x16Bitmap())
        self.img_idx['task_complete'] = self.il.Add(Images.getTask_completeBitmap())
        
        # Listview parents
        self.__initParents()
        
        # Listview rulings
        self.__initRulings()
        
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected, self.lv_parents)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelectedRulings, self.lv_rulings)
        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_YE)
        self.SetExtraStyle(wx.WS_EX_VALIDATE_RECURSIVELY)

        self.Clear()

        # Register PubSub Listener
        pub.subscribe(self.Populate, 'dialog.child.populate') #@UndefinedVariable
        pub.subscribe(self.NewParent, 'dialog.child.newparent') #@UndefinedVariable
        pub.subscribe(self.fill_comboboxes, 'editchildframe.fillcomboboxes') #@UndefinedVariable

        # Persistence
        self.SetName('EditChildFrame')
        self._persistMgr = PM.PersistenceManager.Get()
        wx.CallAfter(self.__register)
        
        self.Bind(wx.EVT_CLOSE, self.OnClose)

        # Create and fill dialogs
        self.pdlg = ParDlg(self)
        pub.sendMessage('dialog.parent.created') #@UndefinedVariable
        
        # This variable becomes true when a value is edited in the frame
        self.__edited(False)
        self._clearing = False
       
    def __set_properties(self):
        # begin wxGlade: EditChildFrame.__set_properties
        self.SetTitle(_("Edit child record"))
        self.SetSize((796, 555))
        self.name.SetName('name')
        self.firstname.SetMinSize((120, 25))
        self.firstname.SetName('firstname')
        self.registrationdate.SetMinSize((101, 22))
        self.registrationdate.SetName('registrationdate')
        self.birthdate.SetMinSize((120, 23))
        self.birthdate.SetName('birthdate')
        self.benefit.SetName('benefit')
        self.joindate.SetMinSize((101, 22))
        self.joindate.SetName('joindate')
        self.year.SetMinSize((80, 23))
        self.yc_description.Enable(False)
        self.separationdate.SetMinSize((120, 23))
        self.separationdate.SetName('separationdate')
        self.parent.SetMinSize((130, 23))
        self.relation.SetMinSize((100, 23))
        self.button_2.SetMinSize((60, 27))
        self.b_delete.SetMinSize((60, 27))
        self.lv_parents.SetMinSize((624, 65))
        self.lv_parents.SetName('lv_parents')
        self.ruling.SetMinSize((150, 23))
        self.startdate.SetMinSize((101, 23))
        self.enddate.SetMinSize((101, 23))
        self.button_5.SetMinSize((60, 27))
        self.b_deleteruling.SetMinSize((60, 27))
        self.lv_rulings.SetMinSize((630, 65))
        self.lv_rulings.SetName('lv_rulings')
        self.btn_OK.SetMinSize((70, 30))
        self.btn_Apply.SetMinSize((70, 30))
        self.btn_Apply.Enable(False)
        self.btn_Cancel.SetMinSize((70, 30))
        self.panel_1.SetScrollRate(10, 10)
        # end wxGlade
        self.name.Validator = TOV()
        self.firstname.Validator = TOV()
        self.benefit.Validator = TOV()
        self.birthdate.Validator = TOV()
        self.joindate.Validator = TOV()
        self.separationdate.Validator = TOV()
        self.lv_parents.Validator = LCV()
        self.lv_rulings.Validator = LCV()
        
    def __do_layout(self):
        # begin wxGlade: EditChildFrame.__do_layout
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_21_staticbox.Lower()
        sizer_21 = wx.StaticBoxSizer(self.sizer_21_staticbox, wx.VERTICAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_28_staticbox.Lower()
        sizer_28 = wx.StaticBoxSizer(self.sizer_28_staticbox, wx.VERTICAL)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(3, 6, 0, 0)
        grid_sizer_2.Add(self.l_Name, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.name, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_firstname, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.firstname, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_registrationdate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.registrationdate, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_birthdate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.birthdate, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_benefit, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.benefit, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_joindate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.joindate, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_year, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.year, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_yearcalculated, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.yc_description, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.l_separationdate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_2.Add(self.separationdate, 0, wx.ALL, 1)
        sizer_27.Add(grid_sizer_2, 0, wx.ALL | wx.EXPAND, 3)
        sizer_29.Add(self.parent, 0, wx.ALL, 1)
        sizer_29.Add(self.l_relation, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_29.Add(self.relation, 0, wx.ALL, 1)
        sizer_29.Add(self.calc, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_29.Add(self.pay, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_29.Add(self.button_2, 0, 0, 0)
        sizer_29.Add(self.b_delete, 0, wx.ALIGN_RIGHT, 0)
        sizer_28.Add(sizer_29, 0, wx.ALL | wx.EXPAND, 3)
        sizer_30.Add(self.lv_parents, 1, wx.EXPAND, 0)
        sizer_28.Add(sizer_30, 1, wx.ALL | wx.EXPAND, 3)
        sizer_27.Add(sizer_28, 1, wx.ALL | wx.EXPAND, 3)
        sizer_22.Add(self.l_rulings, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_22.Add(self.ruling, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_22.Add(self.l_startdate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_22.Add(self.startdate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_22.Add(self.l_enddate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_22.Add(self.enddate, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_22.Add((1, 1), 1, wx.EXPAND, 0)
        sizer_22.Add(self.button_5, 0, 0, 0)
        sizer_22.Add(self.b_deleteruling, 0, 0, 0)
        sizer_21.Add(sizer_22, 0, wx.ALL | wx.EXPAND, 3)
        sizer_23.Add(self.lv_rulings, 1, wx.EXPAND, 0)
        sizer_21.Add(sizer_23, 1, wx.ALL | wx.EXPAND, 3)
        sizer_27.Add(sizer_21, 1, wx.ALL | wx.EXPAND, 3)
        sizer_26.Add(self.btn_OK, 0, 0, 0)
        sizer_26.Add(self.btn_Apply, 0, 0, 0)
        sizer_26.Add(self.btn_Cancel, 0, 0, 0)
        sizer_27.Add(sizer_26, 0, wx.ALL | wx.ALIGN_RIGHT, 3)
        self.panel_1.SetSizer(sizer_27)
        sizer_10.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_10)
        self.Layout()
        # end wxGlade

    def __initParents(self):
        self.lv_parents.InitImageList(self.il, self.img_idx)
        self.lv_parents.SetColumn('adult_id', 'ID', wx.LIST_FORMAT_RIGHT, 80, stringConverter="%i")
        self.lv_parents.SetColumn('name', 'Name', wx.LIST_FORMAT_LEFT, 100)
        self.lv_parents.SetColumn('firstname', 'Vorname', wx.LIST_FORMAT_LEFT, 100)
        self.lv_parents.SetColumn('description', u'Verhältnis', wx.LIST_FORMAT_LEFT, 100)
        self.lv_parents.SetColumn('calc', 'Berechn.', wx.LIST_FORMAT_LEFT, 100, image='task_complete')
        self.lv_parents.SetColumn('pay', 'Zahlungspfl.', wx.LIST_FORMAT_LEFT, 100, image='task_complete')
        
    def __initRulings(self):
        self.lv_rulings.SetColumn('description', 'Bescheid', wx.LIST_FORMAT_LEFT, 200)
        self.lv_rulings.SetColumn('startdate', u'Gültig ab', wx.LIST_FORMAT_RIGHT, 100, stringConverter="%d.%m.%Y")
        self.lv_rulings.SetColumn('enddate', u'Gültig bis', wx.LIST_FORMAT_RIGHT, 100, stringConverter="%d.%m.%Y")

    def __register(self):
        self.Freeze()
        self._persistMgr.RegisterAndRestore(self)
        self.Thaw()
        
    def __edited(self, val):
        self.edited = val
        self.btn_Apply.Enable(val)
        
    def Clear(self):
        self._clearing = True
        # Data objects of this dialog
        self.obj = None
        self.parentobj = None
        self.rulingsobj = None
        data = {
            'name': '',
            'firstname': '', 
            'year': '', 
            'yearcalculated': '', 
            'birthdate': None, 
            'benefit': '',
            'joindate': None,
            'separationdate': None
        }
        self.Populate(data)
        self.parent.Clear()
        self.set_cb_value(self.relation, '')
        self.calc.SetValue(False)
        self.pay.SetValue(False)
        self.set_cb_value(self.ruling, '')
        self.startdate.SetValue(wx.DefaultDateTime)
        self.enddate.SetValue(wx.DefaultDateTime)
        self.__edited(False)
        self._clearing = False
        
    def Save(self):
        
        ret = True
        if self.edited == True:
            if not self.Validate():
                ret = False
            else:
                self.__edited(False)
                self.SendData()
        return ret
            
    def Populate(self, data, parents=None, rulings=None):
        if rulings is None:
            rulings = []
        if parents is None:
            parents = []
        self.obj = data
        for k, v in data.items():
            try:
                # Get the entry control according to the dict key name
                attr = getattr(self, k)
                if k in ('year') and v != None:
                    self.set_cb_value(attr, v)
                else:
                    if k in ('birthdate', 'joindate', 'separationdate'):
                        if v == None:
                            v = wx.DefaultDateTime
                        else:
                            # Convert to wxDatetime to be used by datepicker
                            v = self.pydate2wxdate(v)
                    if k in ('benefit') and v != None:
                        # Convert to string
                        v = '%s' % v
                    if k in ('yc_description'):
                        v = _(v)
                    attr.SetValue(v)
            except (AttributeError, TypeError, ValueError):
                continue
        # Fill subparts
        self.lv_parents.SetObjects(parents)
        self.lv_rulings.SetObjects(rulings)
        self.__edited(False)
    
    def SendData(self):
        # Get values of this dialog
        parents=self.lv_parents.GetObjects()
        rulings=self.lv_rulings.GetObjects()
        pub.sendMessage('dialog.child.senddata', data=self.obj, parents=parents, rulings=rulings) #@UndefinedVariable
        return True
        
    def NewParent(self, data):
        self.__edited(True)
        self.parentobj = None
        idstr = '%d' % data['adult_id']
        self.parent.SetValue(', '.join((idstr, data['name'], data['firstname'])))
        self.set_cb_value(self.relation, '')
        self.calc.SetValue(False)
        self.pay.SetValue(False)
        dct = self.get_cb_value(self.relation)
        self.parentobj = {'adult_id': data['adult_id'],
                           'name': data['name'],
                           'firstname': data['firstname'],
                           'relation_id': dct['id'],
                           'description': dct['label'],
                           'calc': self.calc.GetValue(),
                           'pay': self.pay.GetValue()}
        self.lv_parents.AddObject(self.parentobj)
        self.lv_parents.RefreshObject(self.parentobj)

    def CalcImageGetter(self, dct):
        if (dct['calc'] == True):
            return "task_complete"
        else:
            return -1
        
    def PayImageGetter(self, dct):
        if (dct['pay'] == True):
            return "task_complete"
        else:
            return -1
        
    def OnItemSelected(self, event):
        self.parentobj = obj = self.lv_parents.GetSelectedObject()
        if (not self.parentobj):
            return
        idstr = '%d' % obj['adult_id']
        self.parent.SetValue(', '.join((idstr, obj['name'], obj['firstname'])))
        self.set_cb_value(self.relation, obj['relation_id'])
        self.calc.SetValue(obj['calc'])
        self.pay.SetValue(obj['pay'])

    def OnClose(self, event): # wxGlade: EditChildDialog.<event_handler>
        self.Hide()
        
    def OnCloseButton(self): # wxGlade: EditChildDialog.<event_handler>
        close_event = wx.PyCommandEvent(wx.EVT_CLOSE.typeId, self.GetId())
        wx.PostEvent(self.GetEventHandler(), close_event)

    def OnOK(self, event): # wxGlade: EditChildFrame.<event_handler>
        if self.Save():
            self.OnCloseButton()

    def OnCancel(self, event): # wxGlade: EditChildFrame.<event_handler>
        self.OnCloseButton()

    def OnRefresh(self, event): # wxGlade: EditChildFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        event_id = event.GetId()
        if (self.parentobj == None):
            return
        elif (event_id == ID_RE):
            # itemObject is a dictionary with keys label and id
            dct = self.get_cb_value(self.relation)
            self.parentobj['relation_id'] = dct['id']
            self.parentobj['description'] = dct['label']
        elif (event_id == ID_CHB1):
            self.parentobj['calc'] = self.calc.GetValue()
        elif (event_id == ID_CHB2):
            self.parentobj['pay'] = self.pay.GetValue()
        self.lv_parents.RefreshObject(self.parentobj)
        #if (event_id in (ID_CHB1, ID_CHB2)):
        #    self.lv_parents.RepopulateList()

    def OnNew(self, event): # wxGlade: EditChildFrame.<event_handler>
        self.pdlg.ShowModal()

    def OnDelete(self, event): # wxGlade: EditChildFrame.<event_handler>
        self.__edited(True)
        self.parentobj = self.lv_parents.GetSelectedObject()
        if (not self.parentobj):
            return
        self.parent.Clear()
        self.set_cb_value(self.relation, '')
        self.calc.SetValue(False)
        self.pay.SetValue(False)
        self.lv_parents.RemoveObject(self.parentobj)
        self.parentobj = None

    def OnItemSelectedRulings(self, event):
        self.rulingsobj = obj = self.lv_rulings.GetSelectedObject()
        if (not self.rulingsobj):
            return
        self.set_cb_value(self.ruling, obj['ruling_id'])
        self.startdate.SetValue(self.pydate2wxdate(obj['startdate']))
        self.enddate.SetValue(self.pydate2wxdate(obj['enddate']))
        
    def OnRefreshRuling(self, event): # wxGlade: EditChildFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        event_id = event.GetId()
        startdate = self.wxdate2pydate(self.startdate.GetValue())
        enddate = self.wxdate2pydate(self.enddate.GetValue())
        dct = self.get_cb_value(self.ruling)
        if (self.rulingsobj == None):
            self.rulingsobj = {'ruling_id': dct['id'],
                               'description': dct['label'],
                               'startdate': startdate,
                               'enddate': enddate}
            self.lv_rulings.AddObject(self.rulingsobj)
            return
        elif (event_id == ID_CB2):
            dct = self.get_cb_value(self.ruling)
            self.rulingsobj['ruling_id'] = dct['id']
            self.rulingsobj['description'] = dct['label']
        elif (event_id == ID_DP2):
            self.rulingsobj['startdate'] = startdate
        elif (event_id == ID_DP3):
            self.rulingsobj['enddate'] = enddate
        self.lv_rulings.RefreshObject(self.rulingsobj)

    def OnNewRuling(self, event): # wxGlade: EditChildFrame.<event_handler>
        today = datetime.now()
        self.rulingsobj = {'ruling_id': None, 'description':'', 'startdate': today, 'enddate': today}
        self.lv_rulings.AddObject(self.rulingsobj)
        wxtoday = self.pydate2wxdate(today)
        self.startdate.SetValue(wxtoday)
        self.enddate.SetValue(wxtoday)
        self.set_cb_value(self.ruling, '')
        

    def OnDeleteRuling(self, event): # wxGlade: EditChildFrame.<event_handler>
        self.__edited(True)
        wxtoday = self.pydate2wxdate(datetime.now())
        self.rulingsobj = self.lv_rulings.GetSelectedObject()
        if (not self.rulingsobj):
            return
        self.set_cb_value(self.ruling, '')
        self.startdate.SetValue(wxtoday)
        self.enddate.SetValue(wxtoday)
        self.lv_rulings.RemoveObject(self.rulingsobj)
        self.rulingsobj = None

    def OnChanged(self, event): # wxGlade: EditChildFrame.<event_handler>
        if self._clearing:
            return
        self.__edited(True)
        event_id = event.GetId()
        if (event_id == ID_NA):
            self.obj['name'] = self.name.GetValue()
        elif (event_id == ID_FN):
            self.obj['firstname'] = self.firstname.GetValue()
        elif (event_id == ID_YE):
            # itemObject is a dictionary with keys label and id
            dct = self.get_cb_value(self.year)
            self.obj['year'] = dct['id']
        elif event_id == ID_BI:
            self.obj['birthdate'] = self.wxdate2pydate(self.birthdate.GetValue())
        elif (event_id == ID_DJ):
            self.obj['joindate'] = self.wxdate2pydate(self.joindate.GetValue())
        elif (event_id == ID_DS):
            self.obj['separationdate'] = self.wxdate2pydate(self.separationdate.GetValue())
        elif (event_id == ID_CB):
            self.obj['benefit'] = self.benefit.GetValue()

    def OnApply(self, event): # wxGlade: EditChildFrame.<event_handler>
        self.Save()
# end of class EditChildFrame
