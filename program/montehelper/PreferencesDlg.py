# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Sep 14 17:29:29 2012

import os
import wx
from pubsub import setupkwargs #@UnusedImport
from pubsub import pub
import Images
from collections import defaultdict

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade
ID_DB = wx.NewId()

# Make a shorter alias
_ = wx.GetTranslation

class PreferencesDlg(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PreferencesDlg.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_3 = wx.Panel(self, -1)
        self.l_dbfile = wx.StaticText(self.panel_3, -1, _("Database file"))
        self.dbfile = wx.TextCtrl(self.panel_3, ID_DB, "", style=wx.TE_READONLY)
        self.b_ok = wx.Button(self.panel_3, wx.ID_OK, "")
        self.b_apply = wx.Button(self.panel_3, wx.ID_APPLY, "")
        self.b_cancel = wx.Button(self.panel_3, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.OnChanged, id=ID_DB)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.b_ok)
        self.Bind(wx.EVT_BUTTON, self.OnApply, self.b_apply)
        # end wxGlade

        self.b_dbfile = wx.BitmapButton(self.panel_3, -1, bitmap=Images.getNetwork_server_databaseBitmap())
        self.Bind(wx.EVT_BUTTON, self.OnDBfile, self.b_dbfile)
        self.__do_layout_nowxglade()

        self.obj = defaultdict()

        # Register PubSub Listener
        pub.subscribe(self.Populate, 'dialog.preferences.populate') #@UndefinedVariable


    def __set_properties(self):
        # begin wxGlade: PreferencesDlg.__set_properties
        self.SetTitle(_("Preferences"))
        self.SetSize((452, 252))
        self.b_ok.SetMinSize((70, 30))
        self.b_apply.SetMinSize((70, 30))
        self.b_cancel.SetMinSize((70, 30))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PreferencesDlg.__do_layout
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_1.Add(self.l_dbfile, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_1.Add(self.dbfile, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 1)
        grid_sizer_1.AddGrowableCol(1)
        sizer_17.Add(grid_sizer_1, 1, wx.ALL | wx.EXPAND, 3)
        sizer_13.Add(self.b_ok, 0, 0, 0)
        sizer_13.Add(self.b_apply, 0, 0, 0)
        sizer_13.Add(self.b_cancel, 0, 0, 0)
        sizer_17.Add(sizer_13, 0, wx.ALL | wx.ALIGN_RIGHT, 3)
        self.panel_3.SetSizer(sizer_17)
        sizer_11.Add(self.panel_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_11)
        self.Layout()
        # end wxGlade
        self.grid_sizer_1 = grid_sizer_1
        
    def __do_layout_nowxglade(self):
        self.grid_sizer_1.Add(self.b_dbfile, 0, wx.ALL, 1)
        self.Layout()

    def __save(self):
        # Get values of this dialog
        pub.sendMessage('dialog.preferences.save',  #@UndefinedVariable
                        data=self.obj)
        return True
        
    def Populate(self, data):
        self.obj = data
        for k, v in data.items():
            try:
                attr = getattr(self, k)
                attr.SetValue(v)
            except (AttributeError, TypeError) as ex:
                print(ex)

    def OnDBfile(self, event): # wxGlade: PreferencesDlg.<event_handler>
        dlg = wx.FileDialog(
            self, message=u"Datenbankdatei ausw√§hlen",
            defaultDir=os.getcwd(), 
            defaultFile="",
            wildcard="SQLite (*.db)|*.db",
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )

        # Show the dialog and retrieve the user response. If it is the OK response, 
        # process the data.
        if dlg.ShowModal() == wx.ID_OK:
            # This returns a Python list of files that were selected.
            try:
                paths = dlg.GetPaths()
                self.dbfile.SetValue(paths[0])
            except(Exception) as ex:
                print(ex)
        # Destroy the dialog.
        dlg.Destroy()

    def OnOK(self, event): # wxGlade: PreferencesDlg.<event_handler>
        self.__save()
        event.Skip()

    def OnApply(self, event): # wxGlade: PreferencesDlg.<event_handler>
        self.__save()

    def OnChanged(self, event): # wxGlade: PreferencesDlg.<event_handler>
        event_id = event.GetId()
        if (event_id == ID_DB):
            self.obj['dbfile'] = self.dbfile.GetValue()

# end of class PreferencesDlg

