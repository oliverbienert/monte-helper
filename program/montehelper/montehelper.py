#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue May  1 11:20:56 2012

import wx
import os
import logging
import sys

from Listeners import Listeners #@UnusedImport
from MainFrame import MainFrame as mf
from wx.lib.pubsub import setupkwargs #@UnusedImport
from Preferences import Preferences
from SimpleRotater import SimpleRotater
from Database import Database

logger = logging.getLogger('montehelper')
logger.setLevel(logging.DEBUG)

class MonteHelper(wx.App):
    def OnInit(self):
        self.SetAppName("MonteHelper")
        cfg = Preferences()
        language = cfg.GetProperty('gui', 'lang')
        # Setup the Locale
        self.locale = wx.Locale(getattr(wx, language))
        if getattr(sys, 'frozen', None):
            basedir = sys._MEIPASS  #@UndefinedVariable
        else:
            basedir = os.path.dirname(__file__)        
        path = os.path.join(basedir, "locale") + os.path.sep
        self.locale.AddCatalogLookupPathPrefix(path)
        self.locale.AddCatalog(self.GetAppName())
        # Local is now setup so we can create things that
        # may need it to retrieve translations.        
        mainframe = mf(None, -1, "")
        mainframe.Show()
        self.SetTopWindow(mainframe)
        return 1

# end of class MonteHelper

def main():
    # Make a .montehelper dir in HOME
    mhdir = os.path.join(os.path.expanduser('~'), '.montehelper')
    if not os.path.exists(mhdir):
        os.makedirs(mhdir)
    # Initialize logging
    logfile = os.path.join(mhdir, 'montehelper.log')
    fh = logging.FileHandler(logfile)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logger.addHandler(fh)
    logger.info('Logging initialized')
    # Database backup
    cfg = Preferences()
    dbfile = cfg.GetProperty('sqlite', 'dbfile')
    # Backup database file
    sfile = SimpleRotater(dbfile)
    sfile.backup()
    # Check database version and do necessary updates
    version = int(cfg.GetProperty('program', 'version'))
    db = Database()
    db.updatedb(version)
    # Create instances of needed classes
    li = Listeners() #@UnusedVariable
    # Create GUI and show
    mh = MonteHelper(0)
    logger.info('Main window created, starting main loop')
    mh.MainLoop()

if __name__ == "__main__": main()
